'use strict';

const execSync = require('child_process').execSync;
const fs = require('fs');
const path = require('path');

/**
 * Use Yarn if available, it's much faster than the npm client.
 * Return the version of yarn installed on the system, null if yarn is not available.
 */
function getYarnVersionIfAvailable() {
  let yarnVersion;
  try {
    // execSync returns a Buffer -> convert to string
    yarnVersion = (
      execSync('yarn --version', {
        stdio: [0, 'pipe', 'ignore'],
      }).toString() || ''
    ).trim();
  } catch (error) {
    return null;
  }
  return yarnVersion;
}

function installDevDependencies() {
  console.log('Adding dev dependencies for the project...');

  const devDependenciesJsonPath = path.resolve('devDependencies.json');
  const devDependencies = JSON.parse(fs.readFileSync(devDependenciesJsonPath));
  let depsToInstall = [];

  for (const depName in devDependencies) {
    const depVersion = devDependencies[depName];
    const depToInstall = `${depName}@${depVersion}`;
    depsToInstall.push(depToInstall);
  }

  depsToInstall = depsToInstall.join(' ');
  console.log(`Adding ${depsToInstall}...`);
  if (getYarnVersionIfAvailable()) {
    execSync(`yarn add ${depsToInstall} -D`, { stdio: 'inherit' });
  } else {
    execSync(`npm install ${depsToInstall} --save`);
  }
  console.log('Deleting devDependencies.json...');
  execSync(`rm  ${devDependenciesJsonPath}`);
}

function updatePackageJson() {
  const fileName = 'package.json';
  const packageFile = path.resolve(fileName);
  let file = require(packageFile);
  //these are the scripts that will be added to package.json
  console.log(`Adding scripts to package.json`);
  file.scripts['format'] = "prettier --write --list-different 'js/**/*.{js,jsx,ts,tsx}'";
  file.scripts['lint'] = "tslint --project tsconfig.json --config tslint.json --format verbose";
  file.scripts['typecheck'] = "tsc --noEmit";

  file.jest['moduleFileExtensions'] = [
    "ts",
    "tsx",
    "js"
  ];

  file.jest['transform'] = {
    "^.+\\.(js)$": "<rootDir>/node_modules/babel-jest",
    "\\.(ts|tsx)$": "<rootDir>/node_modules/ts-jest/preprocessor.js"
  };

  file.jest['testRegex'] = "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$";
  file.jest['testPathIgnorePatterns'] = [
    "\\.snap$",
    "<rootDir>/node_modules/"
  ];
  file.jest['cacheDirectory'] = ".jest/cache";
  fs.writeFileSync(fileName, JSON.stringify(file));
}

function updatePodfile() {
  console.log(`Removing unuse pod at Podfile`);
  const podFilePath = path.resolve('iOS', 'Podfile');
  let lines = fs.readFileSync(podFilePath, "utf-8").split('\n');

  for (let i = lines.length - 1; i >= 0; i--) {
    if (lines[i].match(/react-native-template-oursky/)) {         
      lines.splice(i, 1);
    }
  }
  let modifiedPodFile = lines.join('\n');
  fs.writeFileSync(podFilePath, modifiedPodFile);
}

function updateBuildGradle() {
  console.log(`Replacing 'compile' to 'implementation' in build.gradle`);
  const gradleFilePath = path.resolve('android', 'app', 'build.gradle');
  let modifiedGradleFile = fs.readFileSync(gradleFilePath, "utf-8").replace(/(\s+)(compile)(\s+)/, '$1implementation$3');
  fs.writeFileSync(gradleFilePath, modifiedGradleFile);
}

function removeExtraPackage() {
  console.log(`Removing unused java package`);
  const appJSONFilePath = path.resolve('app.json');
  let appJSON = require(appJSONFilePath);
  const packagePath = path.resolve(
    'android', 
    'app',
    'src',
    'main',
    'java',
    'com',
    appJSON.name.toLowerCase()
  );
  execSync(`rm -rf ${packagePath}`);
}

function removeExtraAppJS() {
  console.log(`Removing unused App.js`);
  const appFilePath = path.resolve('App.js');
  execSync(`rm ${appFilePath}`);
}

installDevDependencies();
updatePackageJson();
updatePodfile();
updateBuildGradle();
removeExtraPackage();
removeExtraAppJS();

//TODO: Remove extra ios schames generated by RN cli